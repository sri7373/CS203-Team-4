version: "3.8"

services:
  # Development Database
  db:
    image: postgres:15
    container_name: tariff_db_dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    networks:
      - tariff_dev_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PgAdmin for development
  pgadmin:
    image: dpage/pgadmin4:8
    container_name: tariff_pgadmin_dev
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    depends_on:
      - db
    networks:
      - tariff_dev_network

  # Backend API (Development)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tariff_backend_dev
    restart: unless-stopped
    environment:
      DB_URL: jdbc:postgresql://db:5432/${POSTGRES_DB}
      DB_USERNAME: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION_MS: ${JWT_EXPIRATION_MS}
      GEMINI_API_KEY: ${GEMINI_API_KEY:-AIzaSyCxgqgrYbMCQs9178XiPkabKLKkMGi9q-g}
      NEWSDATA_API_KEY: ${NEWSDATA_API_KEY:-pub_7713507262314bd18c0fb64c8536c7bc}
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - tariff_dev_network
    volumes:
      - ./backend/src:/app/src # Hot reload support (optional)

  # Frontend (Development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: tariff_frontend_dev
    restart: unless-stopped
    ports:
      - "8081:80"
    depends_on:
      - backend
    networks:
      - tariff_dev_network

volumes:
  postgres_dev_data:
    driver: local

networks:
  tariff_dev_network:
    driver: bridge
